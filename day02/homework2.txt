ハッシュテーブルO(1)でなく木構造O(logN)が使われることが多い理由

1.ハッシュ関数を、ハッシュ値に偏りが生まれないように決めなければいけない
2.木構造ならメモリを大きめにとっておく必要がないが、ハッシュテーブルではメモリ(=modK の　K)を大きめにとっておかないと検索効率が悪化、大きく取りすぎるとメモリが無駄になる
3.木構造なら最小値や最大値をO(logN)で調べられるし、通りがけ順探索することでO(N)でソートした配列が簡単に得られるが、ハッシュテーブルの場合は全ての要素を調べたあと並べなおさなければいけない(よって最大値最小値はO(N)、整列はO(NlogN)かかる)。