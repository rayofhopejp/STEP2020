03:キャッシュの管理をO(1)でできるデータ構造

ハッシュテーブル（キーからデータをO(1)で計算できる）に、双方向リスト(最初と最後に要素を追加・削除するのに優れている)を組み合わせたデータ構造を用いれば良い。
ハッシュテーブルと、現在ハッシュテーブルに存在する要素のカウンタと、双方向リストの「始点」と「終点」を保持する。
ハッシュテーブルにはurlに対するコンテンツの他に、「前の要素url」と「後ろの要素url」を格納する。
すると、ハッシュへの追加・削除がO(1)であることを踏まえて、以下のように様々な管理がO(1)でできる。


-与えられたURLがキャッシュに存在するかどうかはハッシュテーブルを参照すれば良い。

-アクセスしたURLが存在する場合は、アクセスしたURLの「前の要素」「後ろの要素」同士を双方向リストで結ぶ。
するとアクセスしたURLは双方向リストから外れるので、双方向リストの「始点」に結び直す。
（「始点だったURL」はアクセスしたURLと結び直される）

-アクセスしたURLが存在しない場合は、ハッシュテーブルに追加し、双方向リストの「始点」と結ぶ。
この操作で要素数がXを超えてしまう場合は、「終点」と繋がっているURLをハッシュから削除し、その一つ前のURLを「終点」と結び直す。


なお、双方向リストを「始点」から「終点」までたどると、キャッシュが最近アクセスした順に手に入る。
宿題04で実際に実装したのでそちらを見てください。
(slackによると辞書を利用していいとのことだったので、ハッシュテーブルの代わりにpythonの辞書を用いています）